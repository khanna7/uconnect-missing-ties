
R version 3.2.1 Patched (2015-07-12 r68650) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## create network with unobserved edges from wave 1
>    rm(list=ls())
> 
> ################################
> ## parallelization frontmatter
> ## From: https://statnet.csde.washington.edu/trac/wiki/ergmParallel
> 
>    library(parallel)
> 
>    # create a cluster with 2 processes per node
>    np <- detectCores()
>    np
[1] 16
> #################################
> 
> ## Fitting procedure
> 
>    ## libraries
>    library(network)
network: Classes for Relational Data
Version 1.13.0 created on 2015-08-31.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.

>    library(ergm)
Loading required package: statnet.common

ergm: version 3.5.1, created on 2015-10-18
Copyright (c) 2015, Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Carter T. Butts, University of California -- Irvine
                    Steven M. Goodreau, University of Washington
                    Pavel N. Krivitsky, University of Wollongong
                    Martina Morris, University of Washington
                    with contributions from
                    Li Wang
                    Kirk Li, University of Washington
                    Skye Bender-deMoll, University of Washington
Based on "statnet" project software (statnet.org).
For license and citation information see statnet.org/attribution
or type citation("ergm").

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

>    library(sna)
sna: Tools for Social Network Analysis
Version 2.3-2 created on 2014-01-13.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.


Attaching package: ‘sna’

The following object is masked from ‘package:network’:

    %c%

> 
>    ## data
>    load(file="gwesp-setup.RData")
> 
>    ## Fit ergm with edges + nodecov('respdeg')
>    ergm.imputed_network <- ergm(imputed_network ~ nodecov('respdeg')+
+                                                   gwesp(1, fixed=TRUE)+
+                                                   nodemix("respondent",
+                                                           base=c(1,3)),
+                                                   verbose=TRUE,
+                                 control=control.ergm(MCMLE.maxit=50,
+                                                      parallel=np
+                                                      )
+                                 )
Evaluating network in model
Initializing Metropolis-Hastings proposal(s): ergm:MH_TNT ergm:MH_listTNT
Initializing model.
Using initial method 'MPLE'.
Fitting initial model.
MPLE covariate matrix has 148560 rows.
Using PSOCK.
Fitting ERGM.
Starting maximum likelihood estimation via MCMLE:
Density guard set to 1064654 from an initial count of 53006  edges.
Iteration 1 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01426484        -0.29191415        -2.19489780 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       2679811.667          89974.479          -1121.467 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         3608992.9           111473.9                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        929181.200          21499.403           1121.467 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0302908793091774  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by < 0.0001 
Iteration 2 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01426571        -0.29194813        -2.19500780 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       3584564.089         126282.761          -2783.511 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         5512206.7           168346.9                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       1927642.593          42064.110           2783.511 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0146148353815079  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by < 0.0001 
Iteration 3 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01426549        -0.29195464        -2.19487720 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       4421908.409         156946.017          -3722.354 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         6826737.3           207258.3                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       2404828.935          50312.242           3722.354 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.014289565384388  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by < 0.0001 
Iteration 4 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01426161        -0.29186654        -2.19406340 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        5167752.54          183074.21           -4261.78 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         7730923.5           233863.8                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        2563171.00           50789.62            4261.78 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0088879019021988  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by < 0.0001 
Iteration 5 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01425397        -0.29168415        -2.19346462 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       5819080.318         205171.075          -4626.803 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         8359230.1           252268.4                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       2540149.778          47097.331           4626.803 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.010869063436985  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by < 0.0001 
Iteration 6 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01422398        -0.29089406        -2.19270291 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       6381202.917         223821.741          -4871.643 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         8793082.7           264832.1                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       2411879.794          41010.405           4871.643 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.0102757439017296  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by < 0.0001 
Iteration 7 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01414318        -0.28860869        -2.19212693 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       6862507.964         239597.865          -4978.377 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         9089713.0           273360.5                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       2227205.063          33762.590           4978.377 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.00979597866535187  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by < 0.0001 
Iteration 8 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         0.0137207         -0.2760699         -2.1907961 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       7274206.206         252983.045          -5043.614 
Cluster passed by user.
Sample size = 1024 by 64 
Back from constrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
         9289828.9           279100.3                0.0 
Average estimating equation values:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       2015622.655          26117.281           5043.614 
Calling MCMLE Optimization...
Using Newton-Raphson Step with step length  0.00936482846736908  ...
Using lognormal metric (see control.ergm function).
Using log-normal approx with missing (no optim)
The log-likelihood improved by 7.989 
Iteration 9 of at most 50 with parameter: 
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
        0.01494151        -0.31242793        -2.15211736 
Cluster passed by user.
Sample size = 1024 by 64 
Back from unconstrained MCMC. Average statistics:
   nodecov.respdeg      gwesp.fixed.1 mix.respondent.0.1 
       7641676.468         264543.967          -4937.177 
Cluster passed by user.
